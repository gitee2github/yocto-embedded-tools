#
# Sample RC file for buildall.  Copy to $HOME/.buildallrc and
# customize to suit your local setup.
#

# How many jobs for make -jN and typical background nice level
JOBS=16
NICE=10

# Point at the (bare) tree you want to source for build test.
#	TREE=~/workdir/foo.git
#		or
#	TREE=git://some.site.com/linux.git
# i.e. both absolute paths and git repos are valid inputs
TREE=git://git.yoctoproject.org/linux-yocto-3.4

# If TREE isn't an absolute path, then you really want to point at
# an existing git repo on disk to save cloning a gig of shared objects.
REFERENCE=~/git/linux

# Set this if you want to be mailed about failures.
# MAILTO="username@someplace.com"

# Set this if you want to randomize builds instead of alphabetical order.
# RANDOMIZE=yes

# More control over what gets built and what doesn't can be done
# with the following black/white lists and black/white regex.
# Any/all can be specified, and they are treated as a logical
# AND of each (i.e. a meta must "pass" each criteria to get used).
#
# List of meta series you want to skip
# BLACKLIST="mti-malta64-be-preempt-rt-meta ti-omap3-standard-meta"

# A regex that can blacklist a whole family
# BLACKREGEX="routerstation.*"

# List of explicit meta that are to be built (all others skipped)
# WHITELIST="common-pc-preempt-rt-meta atom-pc-standard-meta"

# A regex that can whitelist a whole family
# WHITEREGEX=".*-preempt-rt-meta"

# Set this if you want to limit the total number of builds.
# MAX_BUILDS=5

# Sane defaults, based on what yocto/poky generates in the sysroot.
PPC_CROSS_COMPILE=powerpc-poky-linux-
MIPS_CROSS_COMPILE=mips-poky-linux-
ARM_CROSS_COMPILE=arm-poky-linux-gnueabi-
X86_CROSS_COMPILE=i586-poky-linux-
X86_64_CROSS_COMPILE=x86_64-poky-linux-

# If you've already built one of each arch, you'll have these toolchains
# already, and can just change POKY to point at your workspace.  The
# commeted out ones (armv5, core2) are largely duplicates (of armv7, i586).
#
POKY=~/poky
#
# PATH=$PATH:$POKY/build/tmp/sysroots/x86_64-linux/usr/bin/armv5te-poky-linux-gnueabi
PATH=$PATH:$POKY/build/tmp/sysroots/x86_64-linux/usr/bin/armv7a-vfp-neon-poky-linux-gnueabi
PATH=$PATH:$POKY/build/tmp/sysroots/x86_64-linux/usr/bin/i586-poky-linux
# PATH=$PATH:$POKY/build/tmp/sysroots/x86_64-linux/usr/bin/core2-poky-linux
PATH=$PATH:$POKY/build/tmp/sysroots/x86_64-linux/usr/bin/x86_64-poky-linux
PATH=$PATH:$POKY/build/tmp/sysroots/x86_64-linux/usr/bin/mips32-poky-linux
PATH=$PATH:$POKY/build/tmp/sysroots/x86_64-linux/usr/bin/ppc603e-poky-linux

# Alternatively, we can build meta-toolchain for each arch and install
# from build/tmp/deploy/sdk -- default install location is shown:

POKY=/opt/poky/1.7
PATH=$PATH:$POKY/sysroots/x86_64-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi
PATH=$PATH:$POKY/sysroots/x86_64-pokysdk-linux/usr/bin/mips-poky-linux
PATH=$PATH:$POKY/sysroots/x86_64-pokysdk-linux/usr/bin/powerpc-poky-linux-gnuspe
PATH=$PATH:$POKY/sysroots/x86_64-pokysdk-linux/usr/bin/i586-poky-linux
PATH=$PATH:$POKY/sysroots/x86_64-pokysdk-linux/usr/bin/powerpc-poky-linux
PATH=$PATH:$POKY/sysroots/x86_64-pokysdk-linux/usr/bin/x86_64-poky-linux

#
# No real need to change/customize anything below here.
#

# Name of dir created for containing checked out src to build from
LINUX_SRC=linux

# Name of dir created for bare clone used as base tree.
DEFKERN=default_kernel

# Where all the build output lands
BUILDALL=kernel_builds

# If non fatal warnings are issued by buildall, they are here.
WARN_LOG=warnings.txt
